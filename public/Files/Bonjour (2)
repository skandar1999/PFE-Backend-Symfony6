#[Route('/Fileuploade/{email}', name: 'upload_file', methods: ['POST'])]
public function uploadFile(string $email, Request $request, EntityManagerInterface $entityManager): Response
{
    $user = $entityManager->getRepository(User::class)->findOneBy(['email' => $email]);
    if (!$user) {
        throw $this->createNotFoundException('User not found');
    }

    $uploadedFile = $request->files->get('files');
    $name = $request->request->get('name') ?? $uploadedFile->getClientOriginalName();

    // Check if a file with the given name already exists in the database for this user
    $existingFiles = $entityManager->getRepository(File::class)->findBy(['name' => $name, 'user' => $user], ['version' => 'DESC']);
    if ($existingFiles) {
        $version = $existingFiles[0]->getVersion() + 1;
    } else {
        $version = 0;
    }

    // Append the version number to the file name
    $version = 1;
$originalName = $uploadedFile->getClientOriginalName();
$parts = pathinfo($originalName);
$extension = isset($parts['extension']) ? '.' . $parts['extension'] : '';
$basename = basename($originalName, $extension);

$existingFiles = $entityManager->getRepository(File::class)->findBy(['name' => $originalName, 'user' => $user]);
if ($existingFiles) {
    $i = 2;
    do {
        $name = $basename . '_' . $i . $extension;
        $existingFiles = $entityManager->getRepository(File::class)->findBy(['name' => $name, 'user' => $user]);
        $i++;
    } while ($existingFiles);
    $version = $i - 1;
} else {
    $name = $originalName;
}

// Create a new File entity and set its properties
$file = new File();
$file->setName($name);
$file->setDate(new \DateTime());
$file->setUser($user);
$file->setVersion($version);

// Move the uploaded file to a directory on the server
$uploadDir = $this->getParameter('uploads_directory');
$uploadedFile->move($uploadDir, $name);
$file->setPath($uploadDir.'/'.$name);

// Persist the File entity to the database
$entityManager->persist($file);
$entityManager->flush();

return new Response('File uploaded successfully.');
}
